<!-- 

<template>
  <div class="register-container">
    <div class="register-form">
      <h1 class="title">Create account.</h1>
      <p class="login-link">Already have account? <a href="login">Log in</a></p>

      <form @submit.prevent="handleRegister" class="form needs-validation" novalidate :class="{ 'was-validated': formSubmitted }">
        <div class="form-group mb-3">
          <label for="name" class="form-label">Full Name</label>
          <input type="text" v-model="name" class="form-control" id="name" required>
          <div class="invalid-feedback">Please enter your full name</div>
        </div>

        <div class="form-group mb-3">
          <label for="username" class="form-label">Username</label>
          <input type="text" v-model="username" class="form-control" id="username" required>
          <div class="invalid-feedback">Please choose a username</div>
        </div>

        <div class="form-group mb-3">
          <label for="email" class="form-label">Email address</label>
          <input type="email" v-model="email" class="form-control" id="email" required>
          <div class="invalid-feedback">Please enter a valid email</div>
        </div>

        <div class="form-group mb-3">
          <label for="password" class="form-label">Password</label>
          <input type="password" v-model="password" class="form-control" id="password" required minlength="6">
          <div class="invalid-feedback">Password must be at least 6 characters</div>
        </div>

        <div class="form-group mb-3">
          <label for="confirmPassword" class="form-label">Confirm Password</label>
          <input type="password" v-model="confirmPassword" class="form-control" id="confirmPassword" required>
          <div class="invalid-feedback">Passwords must match</div>
        </div>

        <div class="terms-checkbox mb-3 form-check">
          <input type="checkbox" v-model="termsAccepted" class="form-check-input" id="terms" required>
          <label class="form-check-label" for="terms">I've read and agree with your Terms of Services</label>
          <div class="invalid-feedback">You must agree to the terms</div>
        </div>

        <button type="submit" class="submit-btn btn btn-primary w-100 mb-3">Create Account â†’</button>

        <div class="or-divider mb-3">
          <span>OR</span>
        </div>

        <div class="social-logins mb-3">
          <button type="button" class="social-btn facebook btn btn-outline-primary">
            <svg class="social-icon" viewBox="0 0 24 24">
              <path fill="#1877F2" d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z"/>
            </svg>
            <span>Login with Facebook</span>
          </button>

          <button type="button" class="social-btn google btn btn-outline-danger">
            <svg class="social-icon" viewBox="0 0 24 24">
              <path fill="#DB4437" d="M12.545 10.239v3.821h5.445c-0.712 2.315-2.647 3.972-5.445 3.972-3.332 0-6.033-2.701-6.033-6.032s2.701-6.032 6.033-6.032c1.498 0 2.866.549 3.921 1.453l2.814-2.814C17.503 2.332 15.139 1.5 12.545 1.5 6.715 1.5 2 6.214 2 12.044s4.715 10.543 10.545 10.543c8.338 0 10.543-7.225 10.543-10.543 0-0.79-0.085-1.39-0.189-1.989H12.545z"/>
            </svg>
            <span>Login with Google</span>
          </button>
        </div>

        <div v-if="error" class="alert alert-danger">{{ error }}</div>
      </form>
    </div>

    <div class="stats-section">
      <div class="stats-content">
        <h3>Over 1,75,324 candidates waiting for good employees.</h3>
        <div class="stats-grid">
          <div class="stat-item">
            <div class="stat-number">1,75,324</div>
            <div class="stat-label">Live Job</div>
          </div>
          <div class="stat-item">
            <div class="stat-number">97,354</div>
            <div class="stat-label">Companies</div>
          </div>
          <div class="stat-item">
            <div class="stat-number">7,532</div>
            <div class="stat-label">New Jobs</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import { useRouter } from 'vue-router'
import axios from 'axios'

const name = ref('')
const username = ref('')
const email = ref('')
const password = ref('')
const confirmPassword = ref('')
const termsAccepted = ref(false)
const error = ref('')
const formSubmitted = ref(false)
const router = useRouter()

const validatePasswordMatch = () => {
  return password.value === confirmPassword.value
}

const handleRegister = async () => {
  formSubmitted.value = true
  
  if (!validatePasswordMatch()) {
    document.getElementById('confirmPassword').classList.add('is-invalid')
    return
  } else {
    document.getElementById('confirmPassword').classList.remove('is-invalid')
  }

  const form = document.querySelector('.needs-validation')
  if (!form.checkValidity()) {
    return
  }

  try {
    const res = await axios.get(`http://localhost:3000/users?email=${email.value}`)
    if (res.data.length > 0) {
      error.value = 'Email already exists.'
      document.getElementById('email').classList.add('is-invalid')
      return
    }

    const newUser = {
      name: name.value,
      username: username.value,
      email: email.value,
      password: password.value,
      role: 'candidate', 
    }

    await axios.post('http://localhost:3000/users', newUser)
    router.push('home')
  } catch (err) {
    error.value = 'Something went wrong.'
    console.error(err)
  }
}
</script>

<style scoped>
@import './style.css'
</style>
 -->





 <template>
  <div class="container mt-4">
    <!-- Alert Messages -->
    <div class="row">
      <div class="col-md-8 mx-auto">
        <div v-for="alert in alertsStore.alerts" 
             :key="alert.id"
             class="alert alert-dismissible fade show"
             :class="`alert-${alert.type}`">
          {{ alert.message }}
          <button type="button" class="btn-close" @click="alertsStore.removeAlert(alert.id)"></button>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-md-8 mx-auto">
        <div class="card">
          <div class="card-header bg-primary text-white">
            <h4 class="mb-0">Candidate Profile</h4>
          </div>
          
          <div class="card-body">
            <form @submit.prevent="submitForm" class="needs-validation" :class="{ 'was-validated': validated }" novalidate>
              <!-- Name Field -->
              <div class="mb-3">
                <label for="name" class="form-label">
                  <i class="bi bi-person-fill me-2"></i>Full Name
                </label>
                <input type="text" class="form-control" id="name" v-model="formData.name" required>
                <div class="invalid-feedback">Please provide your full name.</div>
              </div>

              <!-- Email Field -->
              <div class="mb-3">
                <label for="email" class="form-label">
                  <i class="bi bi-envelope-fill me-2"></i>Email Address
                </label>
                <input type="email" class="form-control" id="email" v-model="formData.email" required>
                <div class="invalid-feedback">Please provide a valid email.</div>
              </div>

              <!-- Password Field with Toggle -->
              <div class="mb-3">
                <label for="password" class="form-label">
                  <i class="bi bi-lock-fill me-2"></i>Password
                </label>
                <div class="input-group">
                  <input 
                    :type="showPassword ? 'text' : 'password'" 
                    class="form-control" 
                    id="password" 
                    v-model="formData.password" 
                    required
                    minlength="6"
                  >
                  <button class="btn btn-outline-secondary" type="button" @click="togglePassword">
                    <i :class="showPassword ? 'bi bi-eye-slash' : 'bi bi-eye'"></i>
                  </button>
                </div>
                <div class="invalid-feedback">Password must be at least 6 characters.</div>
              </div>

              <!-- Phone Field -->
              <div class="mb-3">
                <label for="phone" class="form-label">
                  <i class="bi bi-telephone-fill me-2"></i>Phone Number
                </label>
                <input type="tel" class="form-control" id="phone" v-model="formData.phone" required>
                <div class="invalid-feedback">Please provide a phone number.</div>
              </div>

              <!-- Location Field -->
              <div class="mb-3">
                <label for="location" class="form-label">
                  <i class="bi bi-geo-alt-fill me-2"></i>Location
                </label>
                <input type="text" class="form-control" id="location" v-model="formData.location" required>
                <div class="invalid-feedback">Please provide your location.</div>
              </div>

              <!-- Experience Field -->
              <div class="mb-3">
                <label for="experience" class="form-label">
                  <i class="bi bi-briefcase-fill me-2"></i>Experience
                </label>
                <input type="text" class="form-control" id="experience" v-model="formData.experience" required>
                <div class="invalid-feedback">Please describe your experience.</div>
              </div>

              <!-- Education Field -->
              <div class="mb-3">
                <label for="education" class="form-label">
                  <i class="bi bi-mortarboard-fill me-2"></i>Education
                </label>
                <input type="text" class="form-control" id="education" v-model="formData.education" required>
                <div class="invalid-feedback">Please provide your education details.</div>
              </div>

              <!-- Resume Upload -->
              <div class="mb-3">
                <label for="resume" class="form-label">
                  <i class="bi bi-file-earmark-pdf-fill me-2"></i>Resume (PDF)
                </label>
                <input type="file" class="form-control" id="resume" accept=".pdf" @change="handleFileUpload">
                <div class="invalid-feedback">Please upload your resume.</div>
              </div>

              <div class="d-grid gap-2">
                <button type="submit" class="btn btn-primary" :disabled="loading">
                  <span v-if="loading" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                  {{ loading ? 'Saving...' : 'Save Profile' }}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { useRoute, useRouter } from 'vue-router'
import { useAlertsStore } from '@/stores/alerts'
import axios from 'axios'

const route = useRoute()
const router = useRouter()
const alertsStore = useAlertsStore()

// Form data
const formData = ref({
  id: '',
  role: 'candidate',
  name: '',
  email: '',
  password: '',
  phone: '',
  location: '',
  experience: '',
  education: '',
  resumeUrl: ''
})

const showPassword = ref(false)
const loading = ref(false)
const validated = ref(false)
const resumeFile = ref(null)

// Toggle password visibility
const togglePassword = () => {
  showPassword.value = !showPassword.value
}

// Handle file upload
const handleFileUpload = (event) => {
  resumeFile.value = event.target.files[0]
}

// Load candidate data if editing
onMounted(async () => {
  if (route.params.id) {
    try {
      const response = await axios.get(`http://localhost:3000/users/${route.params.id}`)
      formData.value = response.data
    } catch (error) {
      alertsStore.addAlert('danger', 'Failed to load candidate data')
    }
  }
})

// Form submission
const submitForm = async () => {
  validated.value = true
  loading.value = true
  
  // Basic validation
  const form = document.querySelector('.needs-validation')
  if (!form.checkValidity()) {
    loading.value = false
    return
  }

  try {
    // Prepare form data (including file upload if needed)
    const data = new FormData()
    for (const key in formData.value) {
      if (formData.value[key] !== null) {
        data.append(key, formData.value[key])
      }
    }
    
    if (resumeFile.value) {
      data.append('resume', resumeFile.value)
    }

    // Save data to JSON server
    if (formData.value.id) {
      // Update existing candidate
      await axios.put(`http://localhost:3000/users/${formData.value.id}`, formData.value)
      alertsStore.addAlert('success', 'Profile updated successfully!')
    } else {
      // Create new candidate
      const response = await axios.post('http://localhost:3000/users', formData.value)
      formData.value.id = response.data.id
      alertsStore.addAlert('success', 'Profile created successfully!')
    }

    // Redirect or show success
    setTimeout(() => {
      router.push('/candidate/dashboard')
    }, 1500)

  } catch (error) {
    console.error('Error saving candidate:', error)
    alertsStore.addAlert('danger', 'Failed to save profile. Please try again.')
  } finally {
    loading.value = false
  }
}
</script>

<style scoped>
.card {
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.card-header {
  border-radius: 10px 10px 0 0 !important;
}

.form-label i {
  width: 20px;
  text-align: center;
}

.invalid-feedback {
  display: none;
}

.was-validated .form-control:invalid ~ .invalid-feedback {
  display: block;
}

.btn-outline-secondary:hover {
  background-color: #f8f9fa;
}
</style>